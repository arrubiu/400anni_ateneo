<?php

use Drupal\search_api\Plugin\search_api\datasource\ContentEntity;
use \Drupal\views\ViewExecutable;
use \Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * @file
 * Contains archivio_utils.module.
 */

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function archivio_utils_node_update(Drupal\Core\Entity\EntityInterface $entity) {
  // Verifico se il tipo di contenuto è una carriera
  if ($entity->bundle() == 'carriera') {
    if (!$entity->get('field_persona')->isEmpty()) {
      $persone = $entity->get('field_persona')->referencedEntities();
      $persona = $persone[0];
      $indexes = ContentEntity::getIndexesForEntity($persona);
      foreach ($indexes as $index) {
        $index->trackItemsUpdated('entity:node', [$persona->id() . ':it']);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function archivio_utils_node_presave(Drupal\Core\Entity\EntityInterface $entity) {

  // Verifico se il tipo di contenuto è uno di quelli della carriera
  if ($entity->bundle() == 'carriera_studente' || $entity->bundle() == 'carriera_docente') {
    $persone = $entity->get('field_persona')->referencedEntities();
    $a = 1;
    /**
     * - se il nodo è nuovo, aggiorno la persona aggiungendo il link alla carriera appena creata
     * - se il nodo non è nuovo, verifico se è cambiato il link alla persona dal nodo originale ad adesso
     *     - se il link alla persona non è cambiato, non faccio niente (la persona deve già avere il link alla carriera). O al massimo verifico che la persona abbia il link alla carriera
     *     - se il link alla persona è cambiatoè cambiato devo fare due cose:
     *         - carico la persona "vecchia", dal nodo carriera originale, e tolgo il riferimento alla carriera che sto salvando
     *         - carico la "nuova" persona e imposto il riferimento alla carriera che sto salvando
     *
     */
  }
}

/**
 * Implements hook_form_alter().
 */
function archivio_utils_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $a = 1;
  if ($form_id == 'layout_builder_add_block') {
    $form['settings']['label_display']['#default_value'] = false;
    $form['settings']['label']['#title'] = 'Titolo amministrativo';
    $form['settings']['label']['#description'] = 'Il titolo amministrativo del blocco, non viene visualizzato nella pagina.';
  }

}

/**
 * Implements hook_views_query_alter().
 */
function archivio_utils_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'mappe' && $view->current_display == 'facolta') {
    foreach ($query->getWhere() as &$condition_group) {
      if ($condition_group['type'] == 'AND') {
        foreach ($condition_group['conditions'] as &$condition) {
          if ($condition[0] == 'field_carriera_facolta') {
            /* @var \Drupal\taxonomy\Entity\Term $term */
            $term = \Drupal::request()->attributes->get('taxonomy_term');
            $tids = [];
            if (!empty($term)) {
              $service = \Drupal::service('archivio_utils.utils');
              $tids[$term->id()] = $term->id();
              $padre = $service->checkPadreDalFiglio($term);
              $figli = [];
              if ($padre == "0") {
                $figli = $service->checkFigliDalPadre($term->id());
              } elseif ($padre != "") {
                $figli = $service->checkFigliDalPadre($padre);
                $tids[$padre] = $padre;
              }

              foreach ($figli as $figlio) {
                $tids[$figlio] = $figlio;
              }
            }
            $condition[1] = $tids;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_token_info()
 */
function archivio_utils_token_info() {
  $types['archivio'] = [
    'name' => t('archivio'),
    'description' => t('Archivio Custom Tokens'),
  ];

  $tokens['archivio_content_image'] = [
    'name' => t('ilminuto Content Image'),
    'description' => t('Image for contents'),
  ];

  $tokens['archivio_content_image_mime'] = [
    'name' => t('archivio Content Image Mime'),
    'description' => t('Image mime width for contents'),
  ];

  $tokens['archivio_base_url'] = [
    'name' => t('archivio Base url'),
    'description' => t('archivio base url'),
  ];

  return [
    'types' => $types,
    'tokens' => [
      'archivio' => $tokens,
    ],
  ];
}

/**
 * Implements hook_tokens()
 */
function archivio_utils_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'archivio') {
    $service = \Drupal::service('archivio_utils.imagetokens');

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'archivio_content_image':
          if (!empty($data)) {
            $url = $service->getImageUrl(reset($data));
          }

          $replacements[$original] = $url;
          break;

        case 'archivio_content_image_mime':
          $entity = reset($data);
          if (!empty($entity)) {
            $mime = $service->getImageMime($entity);
          } else {
            $mime = $service->getImageMime();
          }
          $replacements[$original] = $mime;
          break;

        case 'archivio_base_url':
          $base_url = \Drupal::request()->getSchemeAndHttpHost();
          $replacements[$original] = $base_url;
          break;
      }
    }
  }
  return $replacements;
}
